{
  "kind": "ConfigMap",
  "apiVersion": "v1",
  "metadata": {
    "name": "envoy-apisix-configmap-1",
    "creationTimestamp": null
  },
  "data": {
    "core.lua": "--\n-- Licensed to the Apache Software Foundation (ASF) under one or more\n-- contributor license agreements.  See the NOTICE file distributed with\n-- this work for additional information regarding copyright ownership.\n-- The ASF licenses this file to You under the Apache License, Version 2.0\n-- (the \"License\"); you may not use this file except in compliance with\n-- the License.  You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n--\n\nreturn {\n    ctx      = require(\"apisix.core.ctx\"),\n    json     = require(\"apisix.core.json\"),   -- need a better json lib\n    lrucache = require(\"apisix.core.lrucache\"),\n    plugin   = require(\"apisix.core.plugin\"),\n    re       = require(\"apisix.core.re\"),\n    schema   = require(\"apisix.schema_def\"),\n    string   = require(\"apisix.core.string\"),\n    table    = require(\"apisix.core.table\"),\n    version  = require(\"apisix.core.version\"),\n\n    empty_tab= {},\n}\n",
    "entry.lua": "local core = require(\"apisix.core\")\nlocal ctx = {}\n\nfunction envoy_on_request(request_handle)\n  core.ctx.set_vars_meta(ctx, request_handle)\n\n  local metadata = request_handle:metadata()\n  local plugins = metadata:get(\"plugins\")\n\n  ctx.phase = \"request\"\n  ctx.handle = request_handle\n\n  core.plugin.run(ctx, plugins)\nend\n\nfunction envoy_on_response(response_handle)\n    local metadata = response_handle:metadata()\n    local plugins = metadata:get(\"plugins\")\n  \n    ctx.phase = \"response\"\n    ctx.handle = response_handle\n  \n    core.plugin.run(ctx, plugins)\nend",
    "schema_def.lua": "--\n-- Licensed to the Apache Software Foundation (ASF) under one or more\n-- contributor license agreements.  See the NOTICE file distributed with\n-- this work for additional information regarding copyright ownership.\n-- The ASF licenses this file to You under the Apache License, Version 2.0\n-- (the \"License\"); you may not use this file except in compliance with\n-- the License.  You may obtain a copy of the License at\n--\n--     http://www.apache.org/licenses/LICENSE-2.0\n--\n-- Unless required by applicable law or agreed to in writing, software\n-- distributed under the License is distributed on an \"AS IS\" BASIS,\n-- WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n-- See the License for the specific language governing permissions and\n-- limitations under the License.\n--\nlocal schema    = require('apisix.core.schema')\nlocal setmetatable = setmetatable\nlocal error     = error\n\nlocal _M = {version = 0.5}\n\nlocal plugins_schema = {\n    type = \"object\"\n}\n\nlocal id_schema = {\n    anyOf = {\n        {\n            type = \"string\", minLength = 1, maxLength = 64,\n            pattern = [[^[a-zA-Z0-9-_.]+$]]\n        },\n        {type = \"integer\", minimum = 1}\n    }\n}\n\nlocal host_def_pat = \"^\\\\*?[0-9a-zA-Z-.]+$\"\nlocal host_def = {\n    type = \"string\",\n    pattern = host_def_pat,\n}\n_M.host_def = host_def\n\n\nlocal ipv4_def = \"[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}\"\nlocal ipv6_def = \"([a-fA-F0-9]{0,4}:){0,8}(:[a-fA-F0-9]{0,4}){0,8}\"\n                 .. \"([a-fA-F0-9]{0,4})?\"\nlocal ip_def = {\n    {title = \"IPv4\", type = \"string\", pattern = \"^\" .. ipv4_def .. \"$\"},\n    {title = \"IPv4/CIDR\", type = \"string\", pattern = \"^\" .. ipv4_def .. \"/[0-9]{1,2}$\"},\n    {title = \"IPv6\", type = \"string\", pattern = \"^\" .. ipv6_def .. \"$\"},\n    {title = \"IPv6/CIDR\", type = \"string\", pattern = \"^\" .. ipv6_def .. \"/[0-9]{1,3}$\"},\n}\n_M.ip_def = ip_def\n\n_M.uri_def = {type = \"string\", pattern = [=[^[^\\/]+:\\/\\/([\\da-zA-Z.-]+|\\[[\\da-fA-F:]+\\])(:\\d+)?]=]}\n\n_M.id_schema = id_schema\n\n_M.plugin_disable_schema = {\n    disable = {type = \"boolean\"}\n}\n\n\nsetmetatable(_M, {\n    __index = schema,\n    __newindex = function() error(\"no modification allowed\") end,\n})\n\n\nreturn _M\n"
  }
}